"""Change table name Student to Users for simpler management when allowing login for students

Revision ID: 15f40949099c
Revises: 0aa08387b033
Create Date: 2024-09-10 12:01:58.793968

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "15f40949099c"
down_revision: Union[str, None] = "0aa08387b033"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("first_name", sa.String(length=100), nullable=False),
        sa.Column("last_name", sa.String(length=100), nullable=False),
        sa.Column("surname", sa.String(length=100), nullable=True),
        sa.Column("email", sa.String(length=255), nullable=True),
        sa.Column("phone", sa.String(length=20), nullable=False),
        sa.Column("photo", sa.Text(), nullable=True),
        sa.Column("password", sa.Text(), nullable=True),
        sa.Column("address", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "user_enrollments",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("promotion_id", sa.UUID(), nullable=False),
        sa.Column("level_id", sa.UUID(), nullable=False),
        sa.Column("time_slot_id", sa.UUID(), nullable=True),
        sa.Column("enrollment_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["level_id"], ["levels.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["promotion_id"], ["promotions.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["time_slot_id"], ["time_slots.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    op.drop_constraint(
        "student_enrollments_student_id_fkey", "student_enrollments", type_="foreignkey"
    )
    op.drop_table("student_enrollments")
    op.drop_table("students")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "student_enrollments",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("student_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("promotion_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("level_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("time_slot_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("enrollment_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("end_date", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column("status", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["level_id"],
            ["levels.id"],
            name="student_enrollments_level_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["promotion_id"],
            ["promotions.id"],
            name="student_enrollments_promotion_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["student_id"], ["students.id"], name="student_enrollments_student_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["time_slot_id"],
            ["time_slots.id"],
            name="student_enrollments_time_slot_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="student_enrollments_pkey"),
    )
    op.create_table(
        "students",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "first_name", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column(
            "last_name", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column(
            "surname", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column("email", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("phone", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column("photo", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("address", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="students_pkey"),
        sa.UniqueConstraint("email", name="students_email_key"),
    )
    op.drop_table("user_enrollments")
    op.drop_table("users")
    # ### end Alembic commands ###
