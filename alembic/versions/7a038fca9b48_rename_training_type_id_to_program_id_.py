"""Rename training_type_id to program_id and training_types table to programs

Revision ID: 7a038fca9b48
Revises: d6544247f0d4
Create Date: 2024-09-09 16:56:36.614437

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "7a038fca9b48"
down_revision: Union[str, None] = "d6544247f0d4"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "programs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    # Step 2: Alter dependent tables and columns
    # - For 'levels' table
    op.add_column("levels", sa.Column("program_id", sa.UUID(), nullable=False))
    op.drop_constraint("levels_training_type_id_fkey", "levels", type_="foreignkey")
    op.create_foreign_key(None, "levels", "programs", ["program_id"], ["id"])
    op.drop_column("levels", "training_type_id")

    # - For 'promotions' table
    op.add_column("promotions", sa.Column("program_id", sa.UUID(), nullable=False))
    op.drop_constraint(
        "promotions_training_type_id_fkey", "promotions", type_="foreignkey"
    )
    op.create_foreign_key(None, "promotions", "programs", ["program_id"], ["id"])
    op.drop_column("promotions", "training_type_id")

    # - For 'time_slots' table
    op.add_column("time_slots", sa.Column("program_id", sa.UUID(), nullable=False))
    op.drop_constraint(
        "time_slots_training_type_id_fkey", "time_slots", type_="foreignkey"
    )
    op.create_foreign_key(None, "time_slots", "programs", ["program_id"], ["id"])
    op.drop_column("time_slots", "training_type_id")

    # Step 3: Drop the 'training_types' table after dependencies are handled
    op.drop_table("training_types")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "time_slots",
        sa.Column("training_type_id", sa.UUID(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "time_slots", type_="foreignkey")
    op.create_foreign_key(
        "time_slots_training_type_id_fkey",
        "time_slots",
        "training_types",
        ["training_type_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("time_slots", "program_id")
    op.add_column(
        "promotions",
        sa.Column("training_type_id", sa.UUID(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "promotions", type_="foreignkey")
    op.create_foreign_key(
        "promotions_training_type_id_fkey",
        "promotions",
        "training_types",
        ["training_type_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("promotions", "program_id")
    op.add_column(
        "levels",
        sa.Column("training_type_id", sa.UUID(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "levels", type_="foreignkey")
    op.create_foreign_key(
        "levels_training_type_id_fkey",
        "levels",
        "training_types",
        ["training_type_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("levels", "program_id")
    op.create_table(
        "training_types",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="training_types_pkey"),
        sa.UniqueConstraint("name", name="training_types_name_key"),
    )
    op.drop_table("programs")
    # ### end Alembic commands ###
